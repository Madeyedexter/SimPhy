/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package simphy;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Random;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ButtonGroup;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.UIManager;
import javax.swing.event.HyperlinkEvent;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;
import simphy.DrawingPanel.Mode;

/**
 *
 * @author Madeyedexter
 */
public class SimJFrame extends javax.swing.JFrame
{

    private CircleJDialog circleDialog;
    private final BlockJDialog blockJDialog;
    private final AnimationUpdater animationUpdater;
    private final PropertyTableUpdater tableUpdater;
    private final FileSaver saver;
    private final Random random;
    private final ButtonGroup buttonGroup;
    /**
     * Creates new form SimJFrame
     * @throws java.io.IOException
     */
    private SimJFrame() throws IOException
    {
        initComponents();
        initEditorPane();
        buttonGroup=new ButtonGroup();
        buttonGroup.add(deleteModeToggle);
        buttonGroup.add(createBallToggle);
        buttonGroup.add(createPlaneToggle);
        buttonGroup.add(createBoxToggle);
        buttonGroup.add(createPendulumToggle);
        buttonGroup.add(impulseToggle);
        buttonGroup.add(selectToggle);
        buttonGroup.add(graphToggle);
        random=new Random();
        animationUpdater=new AnimationUpdater(drawingPanel,labelFPS);
        tableUpdater=new PropertyTableUpdater(jTableCircle,drawingPanel);
        this.setIconImage(ImageIO.read(getClass().getResource("icon.png")));
        //initEditorPane();
        drawingPanel.setScale(gridSlider.getValue());
        drawingPanel.prepareGraphics();
        circleDialog=new CircleJDialog(this,true,drawingPanel);
        blockJDialog=new BlockJDialog(this,true,drawingPanel);
        initTableCellListener();
        //instantiate file saver
        saver=new FileSaver();
        //check save before closing
        this.addWindowListener(new WindowListener() {

            @Override
            public void windowOpened(WindowEvent e) 
            {
                
            }

            @Override
            public void windowClosing(WindowEvent e) 
            {
                checkOnClose(e.getComponent());
            }

            @Override
            public void windowClosed(WindowEvent e) {
            }

            @Override
            public void windowIconified(WindowEvent e) {
            }

            @Override
            public void windowDeiconified(WindowEvent e) {
            }

            @Override
            public void windowActivated(WindowEvent e) {
            }

            @Override
            public void windowDeactivated(WindowEvent e) {
            }

        });
        
    }
private void checkOnClose(Component c) 
    {
        int showConfirmDialog = JOptionPane.showConfirmDialog(c, " Unsaved Work May be Lost. Are you Sure?","Confirm Exit", JOptionPane.YES_NO_OPTION);
        if(showConfirmDialog==JOptionPane.YES_OPTION)
        System.exit(1);
        else
        saver.showSaveDialog(this);
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        baseToolbar = new javax.swing.JToolBar();
        globalPropertiesToolbar = new javax.swing.JToolBar();
        gridSlider = new javax.swing.JSlider();
        gravitySpinner = new javax.swing.JSpinner()
        {
            @Override
            public void paintComponent(Graphics g)
            {
                g.drawString("g=",4,2);
            }
        };
        restitutionSpinner = new javax.swing.JSpinner();
        frictionSpinner = new javax.swing.JSpinner();
        simulatorActionsToolbar = new javax.swing.JToolBar();
        stateToggle = new javax.swing.JToggleButton();
        gridToggle = new javax.swing.JToggleButton();
        pathToggle = new javax.swing.JToggleButton();
        itemActionsToolbar = new javax.swing.JToolBar();
        deleteModeToggle = new javax.swing.JToggleButton();
        createBallToggle = new javax.swing.JToggleButton();
        createPlaneToggle = new javax.swing.JToggleButton();
        createBoxToggle = new javax.swing.JToggleButton();
        createPendulumToggle = new javax.swing.JToggleButton();
        impulseToggle = new javax.swing.JToggleButton();
        selectToggle = new javax.swing.JToggleButton();
        graphToggle = new javax.swing.JToggleButton();
        infoBarBottom = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        labelY = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        labelX = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        labelFPS = new javax.swing.JLabel();
        tabbedPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        editorScrollPane = new javax.swing.JScrollPane();
        jTableCircle = new simphy.JTableCircle();
        drawingPanel = new simphy.DrawingPanel();
        jMenuBar2 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        createMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        tutorialsMenu = new javax.swing.JMenu();
        helpMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("SimPhy v1.0");
        setIconImages(null);
        setMaximumSize(new java.awt.Dimension(1366, 768));
        setMinimumSize(new java.awt.Dimension(1366, 768));
        setPreferredSize(new java.awt.Dimension(1366, 768));

        baseToolbar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        baseToolbar.setFloatable(false);
        baseToolbar.setMaximumSize(new java.awt.Dimension(703, 55));
        baseToolbar.setMinimumSize(new java.awt.Dimension(703, 55));
        baseToolbar.setPreferredSize(new java.awt.Dimension(703, 55));

        globalPropertiesToolbar.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Global Properties", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 0, 11))); // NOI18N
        globalPropertiesToolbar.setToolTipText("Global Properties");
        globalPropertiesToolbar.setMargin(new java.awt.Insets(2, 0, 0, 0));

        gridSlider.setFont(new java.awt.Font("Segoe UI", 1, 8)); // NOI18N
        gridSlider.setMajorTickSpacing(1);
        gridSlider.setMaximum(5);
        gridSlider.setMinimum(1);
        gridSlider.setMinorTickSpacing(1);
        gridSlider.setPaintLabels(true);
        gridSlider.setSnapToTicks(true);
        gridSlider.setToolTipText("Set Scale:120px=? m");
        gridSlider.setValue(3);
        gridSlider.setMaximumSize(new java.awt.Dimension(100, 32));
        gridSlider.setMinimumSize(new java.awt.Dimension(100, 32));
        gridSlider.setPreferredSize(new java.awt.Dimension(100, 32));
        gridSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gridSliderStateChanged(evt);
            }
        });
        globalPropertiesToolbar.add(gridSlider);

        gravitySpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(9.8f), Float.valueOf(-100.0f), Float.valueOf(100.0f), Float.valueOf(0.01f)));
        gravitySpinner.setToolTipText("Set Gravity");
        gravitySpinner.setMaximumSize(new java.awt.Dimension(64, 32));
        gravitySpinner.setMinimumSize(new java.awt.Dimension(64, 32));
        gravitySpinner.setPreferredSize(new java.awt.Dimension(64, 32));
        gravitySpinner.setOpaque(false);
        gravitySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gravitySpinnerStateChanged(evt);
            }
        });
        globalPropertiesToolbar.add(gravitySpinner);

        restitutionSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.8f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.01f)));
        restitutionSpinner.setToolTipText("Set Restitution");
        restitutionSpinner.setMaximumSize(new java.awt.Dimension(64, 32));
        restitutionSpinner.setMinimumSize(new java.awt.Dimension(64, 32));
        restitutionSpinner.setPreferredSize(new java.awt.Dimension(64, 32));
        restitutionSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                restitutionSpinnerStateChanged(evt);
            }
        });
        globalPropertiesToolbar.add(restitutionSpinner);

        frictionSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.4f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.01f)));
        frictionSpinner.setMaximumSize(new java.awt.Dimension(64, 32));
        frictionSpinner.setMinimumSize(new java.awt.Dimension(64, 32));
        frictionSpinner.setPreferredSize(new java.awt.Dimension(64, 32));
        frictionSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                frictionSpinnerStateChanged(evt);
            }
        });
        globalPropertiesToolbar.add(frictionSpinner);

        baseToolbar.add(globalPropertiesToolbar);

        simulatorActionsToolbar.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Simulation Actions", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 0, 11))); // NOI18N
        simulatorActionsToolbar.setToolTipText("Simulator Actions");
        simulatorActionsToolbar.setMargin(new java.awt.Insets(2, 0, 0, 0));

        stateToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/simphy/play.png"))); // NOI18N
        stateToggle.setToolTipText("Play/Pause");
        stateToggle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        stateToggle.setFocusable(false);
        stateToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stateToggle.setMaximumSize(new java.awt.Dimension(32, 32));
        stateToggle.setMinimumSize(new java.awt.Dimension(32, 32));
        stateToggle.setPreferredSize(new java.awt.Dimension(32, 32));
        stateToggle.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/simphy/pause.png"))); // NOI18N
        stateToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stateToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stateToggleActionPerformed(evt);
            }
        });
        simulatorActionsToolbar.add(stateToggle);

        gridToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/simphy/gridraised.png"))); // NOI18N
        gridToggle.setSelected(true);
        gridToggle.setToolTipText("Snap to Grid");
        gridToggle.setActionCommand("gridToggle");
        gridToggle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        gridToggle.setFocusable(false);
        gridToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridToggle.setMaximumSize(new java.awt.Dimension(32, 32));
        gridToggle.setMinimumSize(new java.awt.Dimension(32, 32));
        gridToggle.setPreferredSize(new java.awt.Dimension(32, 32));
        gridToggle.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/simphy/gridlowered.png"))); // NOI18N
        gridToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        gridToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gridToggleActionPerformed(evt);
            }
        });
        simulatorActionsToolbar.add(gridToggle);

        pathToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/simphy/path.png"))); // NOI18N
        pathToggle.setToolTipText("Show Trail behind Object");
        pathToggle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pathToggle.setFocusable(false);
        pathToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pathToggle.setMaximumSize(new java.awt.Dimension(32, 32));
        pathToggle.setMinimumSize(new java.awt.Dimension(32, 32));
        pathToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        simulatorActionsToolbar.add(pathToggle);

        baseToolbar.add(simulatorActionsToolbar);

        itemActionsToolbar.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Item Actions", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 0, 11))); // NOI18N
        itemActionsToolbar.setRollover(true);
        itemActionsToolbar.setToolTipText("");
        itemActionsToolbar.setMargin(new java.awt.Insets(2, 0, 0, 0));
        itemActionsToolbar.setMaximumSize(new java.awt.Dimension(266, 55));
        itemActionsToolbar.setMinimumSize(new java.awt.Dimension(266, 55));
        itemActionsToolbar.setPreferredSize(new java.awt.Dimension(266, 55));

        deleteModeToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/simphy/minus.png"))); // NOI18N
        deleteModeToggle.setToolTipText("Delete an Item");
        deleteModeToggle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        deleteModeToggle.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        deleteModeToggle.setFocusable(false);
        deleteModeToggle.setHideActionText(true);
        deleteModeToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteModeToggle.setMaximumSize(new java.awt.Dimension(32, 32));
        deleteModeToggle.setMinimumSize(new java.awt.Dimension(32, 32));
        deleteModeToggle.setPreferredSize(new java.awt.Dimension(32, 32));
        deleteModeToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deleteModeToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteModeToggleActionPerformed(evt);
            }
        });
        itemActionsToolbar.add(deleteModeToggle);

        createBallToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/simphy/circle.png"))); // NOI18N
        createBallToggle.setToolTipText("Create Ball");
        createBallToggle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        createBallToggle.setFocusable(false);
        createBallToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        createBallToggle.setMaximumSize(new java.awt.Dimension(32, 32));
        createBallToggle.setMinimumSize(new java.awt.Dimension(32, 32));
        createBallToggle.setPreferredSize(new java.awt.Dimension(32, 32));
        createBallToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        createBallToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBallToggleActionPerformed(evt);
            }
        });
        itemActionsToolbar.add(createBallToggle);

        createPlaneToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/simphy/fixedPlane.png"))); // NOI18N
        createPlaneToggle.setToolTipText("Create Inclined Plane");
        createPlaneToggle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        createPlaneToggle.setFocusable(false);
        createPlaneToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        createPlaneToggle.setMaximumSize(new java.awt.Dimension(32, 32));
        createPlaneToggle.setMinimumSize(new java.awt.Dimension(32, 32));
        createPlaneToggle.setPreferredSize(new java.awt.Dimension(32, 32));
        createPlaneToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        createPlaneToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPlaneToggleActionPerformed(evt);
            }
        });
        itemActionsToolbar.add(createPlaneToggle);

        createBoxToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/simphy/box.png"))); // NOI18N
        createBoxToggle.setToolTipText("Static Block");
        createBoxToggle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        createBoxToggle.setFocusable(false);
        createBoxToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        createBoxToggle.setMaximumSize(new java.awt.Dimension(32, 32));
        createBoxToggle.setMinimumSize(new java.awt.Dimension(32, 32));
        createBoxToggle.setPreferredSize(new java.awt.Dimension(32, 32));
        createBoxToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        itemActionsToolbar.add(createBoxToggle);

        createPendulumToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/simphy/pendulum.png"))); // NOI18N
        createPendulumToggle.setToolTipText("Create Pendulum");
        createPendulumToggle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        createPendulumToggle.setFocusable(false);
        createPendulumToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        createPendulumToggle.setMaximumSize(new java.awt.Dimension(32, 32));
        createPendulumToggle.setMinimumSize(new java.awt.Dimension(32, 32));
        createPendulumToggle.setPreferredSize(new java.awt.Dimension(32, 32));
        createPendulumToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        createPendulumToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPendulumToggleActionPerformed(evt);
            }
        });
        itemActionsToolbar.add(createPendulumToggle);

        impulseToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/simphy/cannon.png"))); // NOI18N
        impulseToggle.setToolTipText("Impulse");
        impulseToggle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        impulseToggle.setFocusable(false);
        impulseToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        impulseToggle.setMaximumSize(new java.awt.Dimension(32, 32));
        impulseToggle.setMinimumSize(new java.awt.Dimension(32, 32));
        impulseToggle.setPreferredSize(new java.awt.Dimension(32, 32));
        impulseToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        impulseToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                impulseToggleActionPerformed(evt);
            }
        });
        itemActionsToolbar.add(impulseToggle);

        selectToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/simphy/cursorSelect.png"))); // NOI18N
        selectToggle.setSelected(true);
        selectToggle.setToolTipText("Select Object");
        selectToggle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        selectToggle.setFocusable(false);
        selectToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        selectToggle.setMaximumSize(new java.awt.Dimension(32, 32));
        selectToggle.setMinimumSize(new java.awt.Dimension(32, 32));
        selectToggle.setPreferredSize(new java.awt.Dimension(32, 32));
        selectToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        selectToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectToggleActionPerformed(evt);
            }
        });
        itemActionsToolbar.add(selectToggle);

        graphToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/simphy/graph.png"))); // NOI18N
        graphToggle.setToolTipText("Plot Graph");
        graphToggle.setFocusable(false);
        graphToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        graphToggle.setMaximumSize(new java.awt.Dimension(32, 32));
        graphToggle.setMinimumSize(new java.awt.Dimension(32, 32));
        graphToggle.setPreferredSize(new java.awt.Dimension(32, 32));
        graphToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        graphToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphToggleActionPerformed(evt);
            }
        });
        itemActionsToolbar.add(graphToggle);

        baseToolbar.add(itemActionsToolbar);

        infoBarBottom.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        labelY.setText("Y:");

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        labelX.setText("X:");

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        labelFPS.setText("FPS: 0");

        javax.swing.GroupLayout infoBarBottomLayout = new javax.swing.GroupLayout(infoBarBottom);
        infoBarBottom.setLayout(infoBarBottomLayout);
        infoBarBottomLayout.setHorizontalGroup(
            infoBarBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoBarBottomLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelFPS, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelX, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelY, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        infoBarBottomLayout.setVerticalGroup(
            infoBarBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jSeparator2)
            .addComponent(labelX, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(labelY, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jSeparator3)
            .addComponent(labelFPS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        infoBarBottomLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jSeparator1, jSeparator2, labelY});

        tabbedPane.setPreferredSize(new java.awt.Dimension(211, 700));

        jEditorPane1.setContentType("text/html"); // NOI18N
        jScrollPane1.setViewportView(jEditorPane1);

        tabbedPane.addTab("Home", jScrollPane1);

        jSplitPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 0), null));
        jSplitPane1.setDividerSize(2);
        jSplitPane1.setToolTipText("");

        editorScrollPane.setMaximumSize(new java.awt.Dimension(250, 650));
        editorScrollPane.setMinimumSize(new java.awt.Dimension(200, 650));
        editorScrollPane.setPreferredSize(new java.awt.Dimension(200, 650));

        jTableCircle.setGridColor(new java.awt.Color(0, 102, 102));
        jTableCircle.setRowHeight(24);
        jTableCircle.setRowSelectionAllowed(false);
        jTableCircle.setSelectionBackground(new java.awt.Color(51, 255, 51));
        jTableCircle.setSurrendersFocusOnKeystroke(true);
        jTableCircle.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                jTableCircleComponentHidden(evt);
            }
        });
        editorScrollPane.setViewportView(jTableCircle);

        jSplitPane1.setLeftComponent(editorScrollPane);
        jSplitPane1.setRightComponent(drawingPanel);

        tabbedPane.addTab("Simulation", jSplitPane1);

        fileMenu.setText("File");

        newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenuItem.setText("New");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newMenuItem);
        fileMenu.add(jSeparator5);

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);
        fileMenu.add(jSeparator4);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar2.add(fileMenu);

        editMenu.setText("Edit");
        jMenuBar2.add(editMenu);

        createMenu.setText("Create");
        createMenu.setToolTipText("Create a Geometrical Object");
        createMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createMenuActionPerformed(evt);
            }
        });

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/simphy/circle.png"))); // NOI18N
        jMenuItem1.setText("Circle");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        createMenu.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/simphy/box.png"))); // NOI18N
        jMenuItem2.setText("Mobile Block");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        createMenu.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/simphy/fixedplane.png"))); // NOI18N
        jMenuItem3.setText("Ideal Fixed Plane");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        createMenu.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/simphy/fixedblock.jpeg"))); // NOI18N
        jMenuItem4.setText("Fixed Block (Platform)");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        createMenu.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/simphy/rigidlink.png"))); // NOI18N
        jMenuItem5.setText("Ideal Rigid Link");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        createMenu.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/simphy/spring.png"))); // NOI18N
        jMenuItem6.setText("Spring");
        createMenu.add(jMenuItem6);

        jMenuItem7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/simphy/balls.png"))); // NOI18N
        jMenuItem7.setText("Create Random Balls");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        createMenu.add(jMenuItem7);

        jMenuBar2.add(createMenu);

        tutorialsMenu.setText("Tutorials");
        jMenuBar2.add(tutorialsMenu);

        helpMenu.setText("Help");
        jMenuBar2.add(helpMenu);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(baseToolbar, javax.swing.GroupLayout.DEFAULT_SIZE, 832, Short.MAX_VALUE)
            .addComponent(infoBarBottom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(baseToolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(infoBarBottom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void gridSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gridSliderStateChanged
        JSlider jslider=(JSlider)evt.getSource();
        if(!jslider.getValueIsAdjusting())
        {
            drawingPanel.setScale(jslider.getValue());
        }
    }//GEN-LAST:event_gridSliderStateChanged

    private void gridToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gridToggleActionPerformed
        if(drawingPanel.isGridEnabled())
        {
            drawingPanel.setGridEnabled(false);
            if(!DrawingPanel.RUNNING)
            drawingPanel.prepareGraphics();
        }
        else
        {
            drawingPanel.setGridEnabled(true);
            if(!DrawingPanel.RUNNING)
            drawingPanel.prepareGraphics();
        }
    }//GEN-LAST:event_gridToggleActionPerformed

    private void stateToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stateToggleActionPerformed
            if(!animationUpdater.isAlive())
                {
                    animationUpdater.start();
                    DrawingPanel.RUNNING=true;
                    return;
                }
            if(!DrawingPanel.RUNNING)
            synchronized(animationUpdater)
            {
                animationUpdater.notify();
                DrawingPanel.RUNNING=true;
            }
            else
                DrawingPanel.RUNNING=false; 
            
    }//GEN-LAST:event_stateToggleActionPerformed

    private void deleteModeToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteModeToggleActionPerformed
        DrawingPanel.mode=Mode.MODE_DELETE;       
    }//GEN-LAST:event_deleteModeToggleActionPerformed

    private void gravitySpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gravitySpinnerStateChanged
        Utils.GRAVITY=(Float)gravitySpinner.getValue();
    }//GEN-LAST:event_gravitySpinnerStateChanged

    private void restitutionSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_restitutionSpinnerStateChanged
        Utils.RESTITUTION=(Float)restitutionSpinner.getValue();
    }//GEN-LAST:event_restitutionSpinnerStateChanged

    private void frictionSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_frictionSpinnerStateChanged
        Utils.FRICTION=(Float)frictionSpinner.getValue();
    }//GEN-LAST:event_frictionSpinnerStateChanged

    private void createMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_createMenuActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        int size=Items.numCircles();
        for(int i=size;i<size+20;i++)
        {
            String ID="RandomCircle"+i;
            Circle c=new Circle(ID,0.5f,new Vector2D(22.0f,14.0f+random.nextFloat()),5);
            Items.addCircle(c);
            Items.addid(ID);
        }

    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        blockJDialog.setTitle("New Block Object");
        blockJDialog.setVisible(true);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        blockJDialog.setTitle("New Block Object");
        blockJDialog.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        circleDialog=null;
        circleDialog=new CircleJDialog(this,true,drawingPanel);
        circleDialog.setVisible(true);

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        checkOnClose(this);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // TODO add your handling code here:
        int response=saver.showSaveDialog(this);
        if(response==JFileChooser.APPROVE_OPTION)
        {
            try
            {
                String name=saver.getSelectedFile().toString();
                if(!name.endsWith(".scene"))
                    name += ".scene";
                ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(name));
                //write gravity
                oos.writeDouble(Utils.GRAVITY);
                //write restitution
                oos.writeDouble(Utils.RESTITUTION);
                //write ids
                oos.writeInt(Items.getids().size());
                for(int i=0;i<Items.getids().size();i++)
                    oos.writeObject(Items.getids().get(i));
                //write circles
                oos.writeInt(Items.numCircles());
                for(int i=0;i<Items.numCircles();i++)
                    oos.writeObject(Items.getCircle(i));
                //write pendulums
                oos.writeInt(Items.numPendulums());
                for(int i=0;i<Items.numPendulums();i++)
                    oos.writeObject(Items.getPendulum(i));
                //write planes
                oos.writeInt(Items.numPlanes());
                for(int i=0;i<Items.numPlanes();i++)
                    oos.writeObject(Items.getPlane(i));
                
                
            }
            catch (IOException ex)
            {
                System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
        int result=saver.showOpenDialog(this);
        if(result==JFileChooser.APPROVE_OPTION)
        {
            createNewScene();
            try
            {
                ObjectInputStream ois=new ObjectInputStream(new FileInputStream(saver.getSelectedFile()));
                //read gravity
                Utils.GRAVITY=ois.readDouble();
                //read restitution
                Utils.RESTITUTION=ois.readDouble();
                //read ids
                int numIds=ois.readInt();
                for(int i=0;i<numIds;i++)
                    Items.addid((String)ois.readObject());
                //read circles
                int numCircles=ois.readInt();
                for(int i=0;i<numCircles;i++)
                    Items.addCircle((Circle)ois.readObject());
                //read Pendulums
                int numPend=ois.readInt();
                for(int i=0;i<numPend;i++)
                    Items.addPendulum((Pendulum)ois.readObject());
                //read Planes
                int numPlanes=ois.readInt();
                for(int i=0;i<numPlanes;i++)
                    Items.addPlane((Plane)ois.readObject());
            }
            catch (IOException | ClassNotFoundException ex)
            {
                System.out.println(ex.getMessage());
            }
            if(!DrawingPanel.RUNNING)
                drawingPanel.prepareGraphics();
        }

    }//GEN-LAST:event_openMenuItemActionPerformed

    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        // TODO add your handling code here:
        int response=JOptionPane.showConfirmDialog(this, "Unsaved Changes to the Current Scene will be Lost. Continue?","Create New Scene?",JOptionPane.YES_NO_OPTION);
        if(response==JOptionPane.YES_OPTION)
        {
            createNewScene();
        }
    }//GEN-LAST:event_newMenuItemActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        PlaneJDialog planeDialog=new PlaneJDialog(this,true,drawingPanel);
        planeDialog.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void selectToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectToggleActionPerformed
        DrawingPanel.mode=Mode.MODE_SELECT;  
    }//GEN-LAST:event_selectToggleActionPerformed

    private void createBallToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBallToggleActionPerformed
        DrawingPanel.mode=Mode.MODE_CREATECIRCLE;
    }//GEN-LAST:event_createBallToggleActionPerformed

    private void impulseToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_impulseToggleActionPerformed
        DrawingPanel.mode=Mode.MODE_IMPULSE;
    }//GEN-LAST:event_impulseToggleActionPerformed

    private void createPendulumToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPendulumToggleActionPerformed
        DrawingPanel.mode=Mode.MODE_CREATEPENDULUM;
    }//GEN-LAST:event_createPendulumToggleActionPerformed

    private void createPlaneToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPlaneToggleActionPerformed
        DrawingPanel.mode=Mode.MODE_CREATEPLANE;
    }//GEN-LAST:event_createPlaneToggleActionPerformed

    private void graphToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphToggleActionPerformed
        DrawingPanel.mode=Mode.MODE_GRAPH;
    }//GEN-LAST:event_graphToggleActionPerformed

    private void jTableCircleComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTableCircleComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableCircleComponentHidden

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

    /*try
    {
      UIManager.setLookAndFeel(new com.jtattoo.plaf.texture.TextureLookAndFeel());
    } 
    catch (Exception e) 
    {
      e.printStackTrace();
    }*/

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            @Override
            public void run() 
            {
                try 
                {
                    SimJFrame mainFrame=new SimJFrame();
                    mainFrame.setFrametoPanel();
                    mainFrame.startThreads();
                    mainFrame.setVisible(true);
                    
                } 
                catch (IOException ex)
                {
                    System.out.println(ex.getMessage());
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar baseToolbar;
    private javax.swing.JToggleButton createBallToggle;
    private javax.swing.JToggleButton createBoxToggle;
    private javax.swing.JMenu createMenu;
    private javax.swing.JToggleButton createPendulumToggle;
    private javax.swing.JToggleButton createPlaneToggle;
    private javax.swing.JToggleButton deleteModeToggle;
    private simphy.DrawingPanel drawingPanel;
    private javax.swing.JMenu editMenu;
    private javax.swing.JScrollPane editorScrollPane;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JSpinner frictionSpinner;
    private javax.swing.JToolBar globalPropertiesToolbar;
    private javax.swing.JToggleButton graphToggle;
    private javax.swing.JSpinner gravitySpinner;
    private javax.swing.JSlider gridSlider;
    private javax.swing.JToggleButton gridToggle;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JToggleButton impulseToggle;
    private javax.swing.JPanel infoBarBottom;
    private javax.swing.JToolBar itemActionsToolbar;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JSplitPane jSplitPane1;
    private simphy.JTableCircle jTableCircle;
    private javax.swing.JLabel labelFPS;
    private javax.swing.JLabel labelX;
    private javax.swing.JLabel labelY;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JToggleButton pathToggle;
    private javax.swing.JSpinner restitutionSpinner;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JToggleButton selectToggle;
    private javax.swing.JToolBar simulatorActionsToolbar;
    private javax.swing.JToggleButton stateToggle;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JMenu tutorialsMenu;
    // End of variables declaration//GEN-END:variables
public void setlabelX(double c)
{
    if(c==-1.0f)
        labelX.setText("X: ");
    else
        labelX.setText("X: "+c+" m");
}
public void setlabelY(double c)
{
    if(c==-1.0f)
        labelY.setText("Y: ");
    else
        labelY.setText("Y: "+c+" m");
}

    private void setFrametoPanel() 
    {
        drawingPanel.setFrame(this);
    }

    private void startThreads() 
    {
        tableUpdater.start();
    }

   private void initEditorPane() throws IOException 
    {
        jEditorPane1.setEditable(false);
        jEditorPane1.setPage(this.getClass().getResource("/tutorials/index.htm"));
        jEditorPane1.setBackground(Color.WHITE);
        HTMLEditorKit kit = (HTMLEditorKit) jEditorPane1.getEditorKit();
        HTMLDocument doc = (HTMLDocument) jEditorPane1.getDocument();
        kit.setAutoFormSubmission(false);
        jEditorPane1.addHyperlinkListener((HyperlinkEvent hyperlinkEvent) -> {
            HyperlinkEvent.EventType type1 = hyperlinkEvent.getEventType();
            final URL url = hyperlinkEvent.getURL();
            
            int port=url.getPort();
            ClassLoader classLoader = this.getClass().getClassLoader();
            switch(port)
            {
                case 1: createNewScene();
                        Utils.loadScene("tutorials/Projectile.scene", classLoader);
                        tabbedPane.setSelectedIndex(1);
                        if(!DrawingPanel.RUNNING) drawingPanel.draw();
                        return;
                case 2: createNewScene();
                        Utils.loadScene("tutorials/ElasticCollision.scene", classLoader);
                        tabbedPane.setSelectedIndex(1);
                        if(!DrawingPanel.RUNNING) drawingPanel.draw();
                        return;
                case 3: createNewScene();
                        Utils.loadScene("tutorials/InElasticCollision.scene", classLoader);
                        tabbedPane.setSelectedIndex(1);
                        if(!DrawingPanel.RUNNING) drawingPanel.draw();
                        return;
                case 4: createNewScene();
                        Utils.loadScene("tutorials/Pendulum.scene", classLoader);
                        tabbedPane.setSelectedIndex(1);
                        if(!DrawingPanel.RUNNING) drawingPanel.draw();
                        return;
                case 5: createNewScene();
                        Utils.loadScene("tutorials/Rolling.scene", classLoader);
                        tabbedPane.setSelectedIndex(1);
                        if(!DrawingPanel.RUNNING) drawingPanel.draw();
                        return;
                default: break;
            }
            
            if (type1 == HyperlinkEvent.EventType.ENTERED) {
            }
            if (type1 == HyperlinkEvent.EventType.ACTIVATED) {
                try 
                {
                    jEditorPane1.setPage(url);
                }
                catch (IOException ex) 
                {
                    
                }
            }
        });
    }

    private void initTableCellListener() 
    {
        Action action;
        action = new AbstractAction()
        {
             @Override
             public void actionPerformed(ActionEvent e)
             {
                 TableCellListener tcl = (TableCellListener)e.getSource();
                 if(tcl.getColumn()==1)
                 {
                     try
                     {
                         String ol=String.valueOf(tcl.getOldValue());
                         String ne=String.valueOf(tcl.getNewValue());
                         if(ol.equals(ne))
                            return;
                         Circle c=drawingPanel.getDraggedCircle();
                        switch(tcl.getRow())
                        {   
                            case 1: double radius=Float.parseFloat(ne);
                                    if(radius>8.0)
                                        JOptionPane.showMessageDialog(SimJFrame.this, "Ball Size too Large");
                                    else
                                        c.setRadius(radius);
                                    break;
                            case 2: double[] center=new double[2];
                                    String[] points=ne.split(",");
                                    if(points.length!=2)
                                        return;
                                    center[0]=Float.parseFloat(points[0]);
                                    center[1]=Float.parseFloat(points[1]);
                                    double r=c.getRadius();
                                    if(center[0]<r || center[0]+r >47.9 ||center[1]<r ||center[1]+r>25)
                                        JOptionPane.showMessageDialog(SimJFrame.this, "Center out of range!");
                                    else
                                        c.setCenter(new Vector2D(center[0],center[1]));
                                    break;
                            case 3: double mass=Float.parseFloat(ne);
                                    if(mass<0.0f)
                                        JOptionPane.showMessageDialog(SimJFrame.this,"Mass cannot be Negative!");
                                    else
                                        c.setMass(mass);
                                    break;
                            case 4: String[] color=ne.split(",");
                                    if(color.length!=3)
                                        return;
                                    int R=Integer.parseInt(color[0]);
                                    int G=Integer.parseInt(color[1]);
                                    int B=Integer.parseInt(color[2]);
                                    Color col=new Color(R,G,B);
                                    c.setColor(col);
                                    break;
                            case 5: String[] v=ne.split(",");
                                    double v1=Float.parseFloat(v[0]);
                                    double v2=Float.parseFloat(v[1]);
                                    c.setV(new Vector2D(v1,v2));
                                    break;
                            default:break;
                        }
                        if(!DrawingPanel.RUNNING)
                            drawingPanel.draw();
                     }
                     catch(NumberFormatException ile)
                     {
                         JOptionPane.showMessageDialog(SimJFrame.this,"Invalid Numeric Value. Not Allowed:"+ile.getMessage());
                     }
                 }
             }
         };
/*table for pendulum
        Action action1;
        action1 = new AbstractAction()
        {
             @Override
             public void actionPerformed(ActionEvent e)
             {
                 TableCellListener tcl = (TableCellListener)e.getSource();
                 if(tcl.getColumn()==1)
                 {
                     try
                     {
                         String ol=String.valueOf(tcl.getOldValue());
                         String ne=String.valueOf(tcl.getNewValue());
                         if(ol.equals(ne))
                            return;
                        Pendulum p=drawingPanel.getDraggedPendulum();
                        switch(tcl.getRow())
                        {   
                            case 1: double radius=Float.parseFloat(ne);
                                    if(radius>0.5 || radius< 0.1)
                                        JOptionPane.showMessageDialog(SimJFrame.this, "Ball Size out of Range");
                                    else
                                        p.setRadius(radius);
                                    break;
                            case 2: double mass=Double.parseDouble(ne);
                                    if(mass<=0.0f)
                                        JOptionPane.showMessageDialog(SimJFrame.this,"Mass cannot be Negative!");
                                    else
                                        p.setMass(mass);
                                    break;
                            case 3: String[] color=ne.split(",");
                                    if(color.length!=3)
                                        return;
                                    int R=Integer.parseInt(color[0]);
                                    int G=Integer.parseInt(color[1]);
                                    int B=Integer.parseInt(color[2]);
                                    Color col=new Color(R,G,B);
                                    p.setColor(col);
                                    break;
                            case 4: double avel=Double.parseDouble(ne);
                                    p.setOmega(avel);
                                    break;
                            case 5: double angle=Double.parseDouble(ne);
                                    p.setTheta(angle);
                                    break;
                                
                            default:break;
                        }
                        if(!DrawingPanel.RUNNING)
                            drawingPanel.draw();
                     }
                     catch(NumberFormatException ile)
                     {
                         JOptionPane.showMessageDialog(SimJFrame.this,"Invalid Numeric Value. Not Allowed:"+ile.getMessage());
                     }
                 }
             }
         };
*/
            TableCellListener tcl = new TableCellListener(jTableCircle, action);
    }

    private void createNewScene() 
    {
        if(!DrawingPanel.RUNNING)
        {
            Items.getids().clear();
            Items.getBlocks().clear();
            Items.getCircles().clear();
            Items.getPlanes().clear();
            Items.getPendulums().clear();
            drawingPanel.clearReferences();
            drawingPanel.prepareGraphics();
        }
        else
        {
            DrawingPanel.RUNNING=false;
            Items.getids().clear();
            Items.getBlocks().clear();
            Items.getCircles().clear();
            Items.getPlanes().clear();
            Items.getPendulums().clear();
            drawingPanel.clearReferences();
            synchronized(animationUpdater)
            {
                animationUpdater.notify();
                DrawingPanel.RUNNING=true;
            }

        }
        
    }
}
